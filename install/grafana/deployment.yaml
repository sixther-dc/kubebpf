---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-grafana
  namespace: ${NAMESPACE}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-kubebpf-grafana
status:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  phase: Bound
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ${NAMESPACE}
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: registry.erda.cloud/retag/ebpf-grafana:9.5.12
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: data
            # - mountPath: /etc/grafana
            #   name: grafana-config
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasource
            - name: grafana-provisioning-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: data-grafana
      #   - name: grafana-config
      #     configMap:
      #       name: grafana-config
        - name: grafana-datasource
          configMap:
            name: grafana-datasource
        - name: grafana-provisioning-dashboards
          configMap:
            name: grafana-provisioning-dashboards-config
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: ${NAMESPACE}
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: ${NAMESPACE}
spec:
  rules:
  - host: grafana-ebpf.daily.terminus.io
    http:
      paths:
      - backend:
          service:
            name: grafana
            port:
              number: 3000
        path: /
        pathType: Prefix